//WAP to input n number of elements in an dynamic array . Write a menu to do the following operations in the array:
    //a)    Inserting an element.
    //b)    Deleting an element.
    //c)    Reversing the elements.
    //d)    Searching an element.
    //e)    Sorting all the elements.
    //f)    Displaying all the elements.
    //g)    Displaying all composite elements.
    //h)    Quit.

#include <stdio.h>
#include <stdlib.h>
void insert_e(int *arr, int num)
{
    int n1, pos;
    printf("\nEnter the number to be inserted: ");
    scanf("%d", &n1);
    printf("Enter the position: ");
    scanf("%d", &pos);
    num++;
    for (int i = num - 1; i >= pos; i--)
        arr[i] = arr[i - 1];
    arr[pos - 1] = n1;
    for (int i = 0; i < num; i++)
        printf("%d ", arr[i]);
    printf("\n");
}
void delete_e(int *arr, int num)
{
    int pos;
    printf("Enter the position of the element to be deleted: ");
    scanf(" %d", &pos);
    if (pos >= num + 1)
        printf("\nDeletion is not possible.");
    else
    {
        for (int i = pos - 1; i < num - 1; i++)
            arr[i] = arr[i + 1];
        printf("\nThe resultant array is: \n");
        for (int i = 0; i < num - 1; i++)
            printf("%d ", arr[i]);
    }
}

void reverse_e(int *arr, int num)
{
    int temp;
    for (int i = 0; i < num / 2; i++)
    {
        temp = arr[i];
        arr[i] = arr[num - i - 1];
        arr[num - i - 1] = temp;
    }
    printf("The reversed array is: ");
    for (int i = 0; i < num; i++)
    {
        printf("%d ", arr[i]);
    }
}
void search_e(int *arr, int num)
{
    int i = 0, n1;
    printf("Enter the item to be searched: ");
    scanf("%d", &n1);
    while (i < num && n1 != arr[i])
        i++;
    if (i < num)
        printf("The element is found in the position: %d", i + 1);
    else
        printf("Element not found!");
}
void sort_e(int *arr, int num)
{
    int i, j, a;
    for (i = 0; i < num; ++i)
    {
        for (j = i + 1; j < num; ++j)
        {
            if (arr[i] > arr[j])
            {
                a = arr[i];
                arr[i] = arr[j];
                arr[j] = a;
            }
        }
    }
    printf("Sorted array: ");
    for (i = 0; i < num; ++i)
        printf("%d ", arr[i]);
}
void displaydata(int *arr, int num)
{
    printf("The elements of the array are: ");
    for (int i = 0; i < num; i++)
        printf("%d ", arr[i]);
}
void composite_e(int *arr, int num)
{
    int count;
    printf("The composite numbers are: ");
    for (int i = 0; i < num; i++)
    {
        count = 0;
        if (arr[i] == 2)
            printf("%d ", arr[i]);
        for (int j = 1; j <= arr[i]; j++)
        {
            if (arr[i] % j == 0)
            {
                count++;
            }
        }
        if (count > 2)
            printf("%d ", arr[i]);
    }
}

int main()
{
    int num, che, *arr;
    printf("Enter the number of elements: ");
    scanf("%d", &num);
    arr = (int *)malloc(num * sizeof(int));
    printf("Enter the array elements: \n");
    for (int i = 0; i < num; i++)
    {
        printf("Enter element %d: ", i + 1);
        scanf("%d", &arr[i]);
    }
    printf("1. Insert\n");
    printf("2. Deletion\n");
    printf("3. Reverse\n");
    printf("4. Search\n");
    printf("5. Sort\n");
    printf("6. Display\n");
    printf("7. Composite\n");
    printf("8. Quit\n");
    printf("Enter operation choice: ");
    scanf("%d", &che);

    switch (che)
    {
    case 1:
        insert_e(arr, num);
        break;
    case 2:
        delete_e(arr, num);
        break;
    case 3:
        reverse_e(arr, num);
        break;
    case 4:
        search_e(arr, num);
        break;
    case 5:
        sort_e(arr, num);
        break;
    case 6:
        displaydata(arr, num);
        break;
    case 7:
        composite_e(arr, num);
        break;
    case 8:
        printf("Program terminated");
        break;
    default:
        printf("Please enter a valid choice.");
    }
    return 0;
}
